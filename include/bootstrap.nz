| Unrecoverable assertion failure
hard-fail ?t(reason str) noctx unsafe builtin

fail ?t(reason str)
	todo

todo ?t() trusted noctx
	| TODO: soft-fail, remove 'trusted' above
	hard-fail: "TODO"

by-val<?t> builtin

| Unsafe because the ref will only be valid temporarily!
ref-of-val ?t(b by-val ?t) noctx unsafe builtin

| This forces something to be stack-allocated.
| WARN: If '?t' is a reference type already, this is a pointer to a pointer!
ptr-to ptr ?t(t ?t) noctx unsafe builtin

| TODO: this function only works for by-ref types -- currently that is not checked by the type checker
as-any-ptr any-ptr(some-ref ?t) noctx unsafe builtin
| TODO: this function only works for by-ref types -- currently that is not checked by the type checker
as-ref ?t(p any-ptr) noctx unsafe builtin

ptr-eq bool(a ?t, b ?t) noctx unsafe
	a.as-any-ptr == b.as-any-ptr

| Since this fun is not marked 'noctx', it simply returns the ctx that already exists.
get-ctx ctx() unsafe builtin

void builtin
byte builtin

| NOTE: if ?t is a reference type, ptr<?t> is a pointer to a pointer to ?t
ptr<?t> builtin
deref ?t(p ptr ?t) noctx unsafe builtin
set void(p ptr ?t, value ?t) noctx unsafe builtin

null ptr ?t() noctx builtin

any-ptr alias
	ptr byte

is-reference-type?<?t> bool() noctx unsafe builtin
size-of<?t> nat() noctx unsafe builtin

size-or-pointer-size<?t> nat() noctx unsafe
	when
		is-reference-type?<?t>
			size-of<ptr<void>>
		else
			size-of<?t>

ptr-cast ptr ?out(p ptr ?in) noctx unsafe builtin

magic-cast ?out(p ?in) noctx unsafe
	p.as-any-ptr as-ref

to-nat nat(p ptr ?t) noctx unsafe builtin

+ ptr ?t(p ptr ?t, offset nat) noctx unsafe builtin
- ptr ?t(p ptr ?t, offset nat) noctx unsafe builtin
- nat(a ptr ?t, b ptr ?t) noctx unsafe
	a - b.to-nat to-nat

region comparison

less record
equal record
greater record
comparison union
	less
	equal
	greater

to-str str(c comparison)
	match c
		less
			"less"
		equal
			"equal"
		greater
			"greater"

<=> comparison(a ?t, b ?t) data<?t> noctx builtin

== bool(a ?t, b ?t) noctx data<?t>
	match a <=> b
		less
			false
		equal
			true
		greater
			false

| != bool(a ?t, b ?t)
|	a == b not

< bool(a ?t, b ?t) noctx data<?t>
	match a <=> b
		less
			true
		equal
			false
		greater
			false

<= bool(a ?t, b ?t) noctx data<?t>
	b < a not

> bool(a ?t, b ?t) noctx data<?t>
	a <= b not

>= bool(a ?t, b ?t) noctx data<?t>
	a < b not

min ?t(a ?t, b ?t) noctx data<?t>
	(a < b) if a, b

max ?t(a ?t, b ?t) noctx data<?t>
	(a > b) if a, b

| NOTE: this is not a normal record, compiler treats it specially
arr<?t> record
	by-val
	size nat
	data ptr ?t

char builtin
str alias
	arr char
c-str alias
	ptr char

region bool

bool builtin
false bool() noctx builtin
true bool() noctx builtin
not bool(a bool) noctx builtin
| Note: this should be lazily evaluated
and bool(a bool, b bool) noctx builtin
or bool(a bool, b bool) noctx builtin
nand bool(a bool, b bool) noctx builtin
nor bool(a bool, b bool) noctx builtin
| Only one of 'if-true' and 'if-false' arguments will be evaluated
if ?t(cond bool, if-true ?t, if-false ?t) noctx builtin
if void(cond bool, if-true void) noctx builtin

region Fun

| Pointer to a function with no arguments (not even ctx)
fun-ptr0<?r> builtin
fun-ptr1<?r, ?p0> builtin
fun-ptr2<?r, ?p0, ?p1> builtin
fun-ptr3<?r, ?p0, ?p1, ?p2> builtin
fun-ptr4<?r, ?p0, ?p1, ?p2, ?p3> builtin
fun-ptr5<?r, ?p0, ?p1, ?p2, ?p3, ?p4> builtin
fun-ptr6<?r, ?p0, ?p1, ?p2, ?p3, ?p4, ?p5> builtin

ctx record mut
	by-ref
	gctx-ptr any-ptr
	vat-id vat-id
	actor-id actor-id
	gc-ctx-ptr any-ptr

vat-id alias
	nat

actor-id alias
	nat

vat-and-actor-id record
	by-val
	vat vat-id
	actor actor-id

| A fun is two pointers -- one to the fun pointer, one to the closure.
| TODO: point to the vtable, and have vtable also store layout information
fun0<?r> record mut
	by-val
	fun-ptr fun-ptr2 ?r ctx any-ptr
	closure any-ptr
fun1<?r, ?p0> record mut
	by-val
	fun-ptr fun-ptr3 ?r ctx any-ptr ?p0
	closure any-ptr
fun2<?r, ?p0, ?p1> record mut
	by-val
	fun-ptr fun-ptr4 ?r ctx any-ptr ?p0 ?p1
	closure any-ptr
fun3<?r, ?p0, ?p1, ?p2> record mut
	by-val
	fun-ptr fun-ptr5 ?r ctx any-ptr ?p0 ?p1 ?p2
	closure any-ptr

| A fun-mut may close over 'mut' state.
| (A normal 'fun' may still closue over mutable state that is sendable.)
fun-mut0<?r> record mut
	by-val
	fun-ptr fun-ptr2 ?r ctx any-ptr
	closure any-ptr
fun-mut1<?r, ?p0> record mut
	by-val
	fun-ptr fun-ptr3 ?r ctx any-ptr ?p0
	closure any-ptr
fun-mut2<?r, ?p0, ?p1> record mut
	by-val
	fun-ptr fun-ptr4 ?r ctx any-ptr ?p0 ?p1
	closure any-ptr
fun-mut3<?r, ?p0, ?p1, ?p2> record mut
	by-val
	fun-ptr fun-ptr5 ?r ctx any-ptr ?p0 ?p1 ?p2
	closure any-ptr

| A normal fun is non-sendable, a fun-ref becomes sendable by storing the vat/actor that will provide its ctx.
| As the name implies, we have a reference to the fun, but when we call it,
| the one who created it runs the code, not us.
fun-ref0<?r> record force-sendable
	by-val
	vat-and-actor vat-and-actor-id
	fun fun-mut0 fut<?r>
fun-ref1<?r, ?p0> record force-sendable
	by-val
	vat-and-actor vat-and-actor-id
	fun fun-mut1 fut<?r> ?p0
fun-ref2<?r, ?p0, ?p1> record force-sendable
	by-val
	vat-and-actor vat-and-actor-id
	fun fun-mut2 fut<?r> ?p0 ?p1
fun-ref3<?r, ?p0, ?p1, ?p2> record force-sendable
	by-val
	vat-and-actor vat-and-actor-id
	fun fun-mut3 fut<?r> ?p0 ?p1 ?p2

| calling a fun-ptr is a primitive operation
call ?r(f fun-ptr0 ?r) noctx builtin
call ?r(f fun-ptr1 ?r ?p0, p0 ?p0) noctx builtin
call ?r(f fun-ptr2 ?r ?p0 ?p1, p0 ?p0, p1 ?p1) noctx builtin
call ?r(f fun-ptr3 ?r ?p0 ?p1 ?p2, p0 ?p0, p1 ?p1, p2 ?p2) noctx builtin
call ?r(f fun-ptr4 ?r ?p0 ?p1 ?p2 ?p3, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3) noctx builtin
call ?r(f fun-ptr5 ?r ?p0 ?p1 ?p2 ?p3 ?p4, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3, p4 ?p4) noctx builtin
call ?r(f fun-ptr6 ?r ?p0 ?p1 ?p2 ?p3 ?p4 ?p5, p0 ?p0, p1 ?p1, p2 ?p2, p3 ?p3, p4 ?p4, p5 ?p5) noctx builtin

| Note: this is the implementation for a dynamic call.
| But the compiler may call the function dynamically instead
call ?r(f fun0 ?r) trusted
	get-ctx call-with-ctx f

call-with-ctx ?r(c ctx, f fun0 ?r) noctx
	f.fun-ptr call c, f.closure

call ?r(f fun-mut0 ?r) trusted
	get-ctx call-with-ctx f

call-with-ctx ?r(c ctx, f fun-mut0 ?r) noctx
	f.fun-ptr call c, f.closure

call ?r(f fun1 ?r ?p0, p0 ?p0) trusted
	get-ctx call-with-ctx f, p0

call-with-ctx ?r(c ctx, f fun1 ?r ?p0, p0 ?p0) noctx
	f.fun-ptr call c, f.closure, p0

call ?r(f fun-mut1 ?r ?p0, p0 ?p0) trusted
	get-ctx call-with-ctx f, p0

call-with-ctx ?r(c ctx, f fun-mut1 ?r ?p0, p0 ?p0) noctx
	f.fun-ptr call c, f.closure, p0

call ?r(f fun2 ?r ?p0 ?p1, p0 ?p0, p1 ?p1) trusted
	get-ctx call-with-ctx f, p0, p1

call-with-ctx ?r(c ctx, f fun2 ?r ?p0 ?p1, p0 ?p0, p1 ?p1) noctx
	f.fun-ptr call c, f.closure, p0, p1

call ?r(f fun-mut2 ?r ?p0 ?p1, p0 ?p0, p1 ?p1) trusted
	get-ctx call-with-ctx f, p0, p1

call-with-ctx ?r(c ctx, f fun-mut2 ?r ?p0 ?p1, p0 ?p0, p1 ?p1) noctx
	f.fun-ptr call c, f.closure, p0, p1

call ?r(f fun3 ?r ?p0 ?p1 ?p2, p0 ?p0, p1 ?p1, p2 ?p2) trusted
	get-ctx call-with-ctx f, p0, p1, p2

call-with-ctx ?r(c ctx, f fun3 ?r ?p0 ?p1 ?p2, p0 ?p0, p1 ?p1, p2 ?p2) noctx
	f.fun-ptr call c, f.closure, p0, p1, p2

call ?r(f fun-mut3 ?r ?p0 ?p1 ?p2, p0 ?p0, p1 ?p1, p2 ?p2) trusted
	get-ctx call-with-ctx f, p0, p1, p2

call-with-ctx ?r(c ctx, f fun-mut3 ?r ?p0 ?p1 ?p2, p0 ?p0, p1 ?p1, p2 ?p2) noctx
	f.fun-ptr call c, f.closure, p0, p1, p2

| A type is data if it is:
| * A primitive
| * A record or union of pure types
data<?t> builtin-spec

| A type is sendable if it does not have any thread-unsafe mutable state.
send<?t> builtin-spec


region Arithmetic

| All are 64-bits, even on 32-bit systems
nat builtin
int builtin
float builtin
| Not currently used for anything other than posix headers, so limited arithmetic is avialable
int16 builtin
int32 builtin
nat16 builtin
nat32 builtin

| UB for negative numbers
unsafe-to-nat nat(i int) noctx builtin

unsafe-to-nat32 nat32(n nat) noctx builtin

| UB for positive numbers >= 2 ** 63
unsafe-to-int int(n nat) noctx builtin

unsafe-to-int32 int32(i int) noctx builtin

to-nat nat(n nat16) noctx builtin
to-nat nat(n nat32) noctx builtin

to-int int(i int16) noctx builtin
to-int int(i int32) noctx builtin

wrap-add nat(a nat, b nat) noctx builtin
wrap-add nat32(a nat32, b nat32) noctx builtin
wrap-sub nat(a nat, b nat) noctx builtin
wrap-sub nat32(a nat32, b nat32) noctx builtin
wrap-mul nat(a nat, b nat) noctx builtin
wrap-mul nat32(a nat32, b nat32) noctx builtin
unsafe-div nat(a nat, b nat) noctx unsafe builtin
unsafe-mod nat(a nat, b nat) noctx unsafe builtin
zero nat() noctx builtin
one nat() noctx builtin
two nat() noctx
	one wrap-incr
three nat() noctx
	two wrap-incr
four nat() noctx
	three wrap-incr
five nat() noctx
	four wrap-incr
six nat() noctx
	five wrap-incr
seven nat() noctx
	six wrap-incr
eight nat() noctx
	seven wrap-incr
nine nat() noctx
	eight wrap-incr
ten nat() noctx
	nine wrap-incr
hundred nat() noctx
	ten wrap-mul ten
thousand nat() noctx
	hundred wrap-mul ten
million nat() noctx
	thousand wrap-mul thousand
billion nat() noctx
	million wrap-mul thousand

bits-and nat16(a nat16, b nat16) noctx builtin
bits-and nat32(a nat32, b nat32) noctx builtin
bits-and nat(a nat, b nat) noctx builtin

| TODO: generic
zero? bool(n nat) noctx
	n == zero
zero? bool(n nat32) noctx
	n == zero
zero? bool(i int) noctx
	i == zero
zero? bool(i int32) noctx
	i == zero

wrap-add int(a int, b int) noctx builtin
wrap-sub int(a int, b int) noctx builtin
wrap-mul int(a int, b int) noctx builtin
unsafe-div int(a int, b int) noctx unsafe builtin
zero int() noctx builtin
one int() noctx builtin
neg-one int() noctx
	zero wrap-sub one
two int() noctx
	one wrap-incr
three int() noctx
	two wrap-incr
four int() noctx
	three wrap-incr
five int() noctx
	four wrap-incr
six int() noctx
	five wrap-incr
seven int() noctx
	six wrap-incr
eight int() noctx
	seven wrap-incr
nine int() noctx
	eight wrap-incr
ten int() noctx
	nine wrap-incr
hundred int() noctx
	ten wrap-mul ten
thousand int() noctx
	hundred wrap-mul ten
million int() noctx
	thousand wrap-mul thousand
neg-million int() noctx
	million wrap-mul neg-one
billion int() noctx
	million wrap-mul thousand

wrap-add int32(a int32, b int32) noctx builtin
wrap-sub int32(a int32, b int32) noctx builtin
zero int32() noctx builtin
one int32() noctx builtin
neg-one int32() noctx
	zero wrap-sub one
two int32() noctx
	one wrap-add one
three int32() noctx
	two wrap-add one
four int32() noctx
	three wrap-add one
eight int32() noctx
	four wrap-add four
ten int32() noctx
	four wrap-add two



wrap-incr nat32(n nat32) noctx
	n wrap-add one
wrap-decr nat32(n nat32) noctx
	n wrap-sub one
zero nat32() noctx builtin
one nat32() noctx builtin
two nat32() noctx
	one wrap-incr
three nat32() noctx
	two wrap-incr
four nat32() noctx
	three wrap-incr
five nat32() noctx
	four wrap-incr
six nat32() noctx
	five wrap-incr
seven nat32() noctx
	six wrap-incr
eight nat32() noctx
	seven wrap-incr
twelve nat32() noctx
	eight wrap-add four
fourteen nat32() noctx
	twelve wrap-add two
fifteen nat32() noctx
	fourteen wrap-incr
two-pow nat32(pow nat32) noctx
	| TODO: use bitshift
	when
		pow zero?
			one
		else
			| TODO: safety
			pow.wrap-decr.two-pow wrap-mul two

zero nat16() noctx builtin

wrap-incr nat(n nat) noctx
	n wrap-add one

noctx-incr nat(n nat) noctx unsafe
	| TODO: billion should be max-value
	hard-assert: n < billion
	n wrap-incr

incr nat(n nat)
	| TODO: billion should be max-value
	assert: n < billion
	n wrap-add one

wrap-incr int(i int) noctx
	i wrap-add one

incr int(i int)
	| TODO: billion should be max-value
	assert: i < billion
	i wrap-add one

incr ptr ?t(p ptr ?t) noctx unsafe
	p + one

noctx-decr nat(n nat) noctx unsafe
	hard-forbid: n zero?
	n wrap-sub one

decr nat(n nat)
	forbid: n zero?
	n wrap-sub one

| decr int(i int)
|	i - 1

decr ptr ?t(p ptr ?t) noctx unsafe
	p - one

+ nat(a nat, b nat)
	res = a wrap-add b
	assert: res >= a and: res >= b
	res
- nat(a nat, b nat)
	assert: a >= b
	a wrap-sub b
* nat(a nat, b nat)
	| TODO: better safety check
	when
		a.zero? or: b.zero?
			zero
		else
			res = a wrap-mul b
			assert: res / b == a
			assert: res / a == b
			res
/ nat(a nat, b nat) trusted
	forbid: b zero?
	a unsafe-div b

mod nat(a nat, b nat) trusted
	forbid: b zero?
	a unsafe-mod b

+ int(a int, b int)
	| TODO: better safety check
	assert: a > neg-million
	assert: a < million
	assert: b > neg-million
	assert: b < million
	a wrap-add b

- int(a int, b int)
	| TODO: better safety check
	assert: a > neg-million
	assert: a < million
	assert: b > neg-million
	assert: b < million
	a wrap-sub b
* int(a int, b int)
	assert: a > neg-million
	assert: a < million
	assert: b > neg-million
	assert: b < million
	a wrap-mul b
/ int(a int, b int) trusted
	forbid: b zero?
	| If a is the smallest int and b is -1, result is UB
	| TODO: better safety check
	assert: a > neg-million
	a unsafe-div b

to-int int(n nat)
	| assert: n < (32 pow2)
	assert: n < million
	n unsafe-to-int

to-nat nat(i int)
	forbid: i.negative?
	i unsafe-to-nat

negative? bool(i int)
	i < zero

neg int(i int)
	i * neg-one

neg int(n nat)
	n.to-int neg

abs nat(i int)
	i-abs = i.negative? if i.neg, i
	i-abs to-nat

mod nat(a int, b nat)
	forbid: b zero?
	when
		a negative?
			x = a.abs mod b
			x == b if: zero, b - x
		else
			a.to-nat mod b

+ float(a float, b float) noctx builtin
- float(a float, b float) noctx builtin
* float(a float, b float) noctx builtin
unsafe-div float(a float, b float) noctx unsafe builtin
zero float() noctx builtin
one float() noctx builtin


region Util

pass void() noctx builtin
pass fut void() noctx builtin
drop void(t ?t) noctx
	pass

hard-assert void(condition bool) noctx unsafe
	condition if pass, "Assertion failed!".hard-fail

assert void(condition bool)
	condition if pass, "Assertion failed!".fail

hard-forbid void(condition bool) noctx unsafe
	condition.not hard-assert

forbid void(condition bool)
	condition.not assert

hard-assert-unreachable ?t() noctx unsafe
	"should be unreachable" hard-fail

assert-unreachable ?t()
	"should be unreachable" fail

some<?t> record
	by-val
	value ?t
none record
opt<?t> union
	none
	some<?t>

some some ?x(t ?x) noctx
	new t

none none() noctx
	new<none>

empty? bool(a opt ?t) noctx
	match a
		none n
			true
		some s
			false

has? bool(a opt ?t) noctx
	a.empty? not

force ?t(a opt ?t)
	match a
		none n
			fail: "tried to force empty option"
		some s
			s.value

ok<?t> record
	by-val
	value ?t
err<?t> record
	by-val
	value ?t
result<?ok, ?err> union
	ok<?ok>
	err<?err>

ok ok ?t(t ?t) noctx
	new t
err err ?t(t ?t) noctx
	new t

as ?t(value ?t) noctx builtin
as-non-const ?t(value ?t) noctx builtin

region fut

fut<?t> record force-sendable
	lk by-val lock
	state mut fut-state ?t

fut-state<?t> union mut
	fut-state-callbacks<?t>
	fut-state-resolved<?t>

fut-state-callbacks<?t> record mut
	head opt fut-callback-node<?t>

fut-callback-node<?t> record mut
	| WARN: the cb will be called with whatever ctx resolves the fut
	cb fun-mut1 void ?t
	next-node opt fut-callback-node<?t>

fut-state-resolved<?t> record
	value ?t


region lock

atomic-bool record force-sendable
	value mut bool

lock record sendable
	by-ref
	| Storing this by-val to avoid needing allocations.
	| User should prefer to store the lock by-val too, and only pass by-ref
	is-locked by-val atomic-bool


