| .str-utils for c-str.to-str
import .arr-utils .gc .mut-bag .str-utils .thread-utils


| Treated specially by the compiler
rt-main int32(argc int32, argv ptr c-str, user-main-ptr fun-ptr2 fut<int32> ctx arr<str>) trusted noctx summon
	| TODO: more threads
	n-threads = one as<nat>
	gctx-by-val = new<by-val<global-ctx>> new-lock, empty-arr<vat>, n-threads, new-condition, false
	gctx = gctx-by-val ref-of-val
	vat-by-val = new-vat: gctx, zero, n-threads
	vat = vat-by-val ref-of-val

	vats = new<arr<vat>> one, vat.ptr-to

	gctx.vats := vats

	| Before we start the engine, add a task.
	| Create a ctx manually so we can call functions that need it when creating the task
	ctx-by-val = new-ctx: gctx, vat, zero
	ctx = ctx-by-val ref-of-val
	| TODO: just 'as'
	add = &add-first-task as-non-const<fun3<void, vat, arr<c-str>, fun-ptr2<fut<int32>, ctx, arr<str>>>>
	args = new<arr<c-str>> argc.to-int.unsafe-to-nat, argv
	| TODO: shouldn't need user-main-ptr.as-non-const
	ctx call-with-ctx3<void, vat, arr<c-str>, fun-ptr2<fut<int32>, ctx, arr<str>>> add, vat, args, user-main-ptr.as-non-const

	| TODO: more than one thread
	tls = new<by-val<thread-local-stuff>> zero
	thread-function: zero, gctx, tls.ref-of-val

	| TODO: return number from main fn
	zero

get-gctx global-ctx() unsafe
	get-ctx.gctx-ptr as-ref

get-vat vat(vat-id vat-id) unsafe
	get-gctx.vats at vat-id

get-cur-vat vat() unsafe
	get-ctx.vat-id get-vat

| This fun is required by the compiler.
cur-actor vat-and-actor-id() unsafe
	c = get-ctx
	new c.vat-id, c.actor-id

| Runs 'f' asynchronously.
| Since 'f' is 'fun' and not 'fun-mut' it is guaranteed to not close over 'mut' data.
| So we can run it in parallel.
async fut ?t(f fun0 fut<?t>) trusted
	res = new-unresolved-fut<?t>
	vat = get-cur-vat
	vat add-task new<task> vat.new-actor-id, \
		f.call forward-to res
	res

call fut ?r(f fun-ref0 ?r) trusted send<?r>
	vat = f.vat-and-actor.vat get-vat
	res = new-unresolved-fut<?r>
	vat add-task new<task> f.vat-and-actor.actor, \
		f.fun.call forward-to res
	res

call fut ?r(f fun-ref1 ?r ?p0, p0 ?p0) trusted send<?r> send<?p0>
	vat = f.vat-and-actor.vat get-vat
	res = new-unresolved-fut<?r>
	vat add-task new<task> f.vat-and-actor.actor, \
		f.fun call p0 forward-to res
	res

call fut ?r(f fun-ref2 ?r ?p0 ?p1, p0 ?p0, p1 ?p1) trusted send<?r> send<?p0> send<?p1>
	vat = f.vat-and-actor.vat get-vat
	res = new-unresolved-fut<?r>
	vat add-task new<task> f.vat-and-actor.actor, \
		f.fun call p0, p1 forward-to res
	res

global-ctx record mut
	lk by-val lock
	| TODO: mut-arr
	vats mut arr vat
	| When a thread finds no work to do, it decrements this and waits on 'may-be-work-to-do'.
	| When the last thread decrements this, it can't go to sleep!
	| But if there's no work to do, it can set 'is-shut-down' and wake up the other threads so they can shut down too.
	n-live-threads mut nat
	may-be-work-to-do by-val condition
	is-shut-down mut bool

vat record mut
	gctx global-ctx
	id vat-id
	gc by-val gc

	| these variables are all protected by tasks-lock
	tasks-lock by-val lock
	tasks by-val mut-bag<task>
	| TODO: mut-set
	currently-running-actors by-val mut-arr<actor-id>
	| Number of threads currently performing tasks in this vat
	n-threads-running mut nat

	| not protected by tasks-lock, thread-safe on its own
	next-actor-id by-val thread-safe-counter


task record mut
	by-val
	| Unlike a fun-ref, this is stored in the vat already, so no need to store vat here too.
	| Also, the fun just returns 'void'. You can just use a fut-returning fun and drop the fut.
	| The fun runs using a ctx created from the actor-id.
	actor-id actor-id
	fun fun-mut0 void


| Considered unsafe because normally it should not be possible to never resolve a fut
new-unresolved-fut fut ?t() unsafe
	new new-lock, new<fut-state-callbacks<?t>> none

resolved fut ?t(value ?t)
	new new-lock, new<fut-state-resolved<?t>> value

resolve void(f fut ?t, value ?t) unsafe
	f.lk.ref-of-val acquire-lock
	match f.state
		fut-state-callbacks cbs
			cbs.head resolve-recur value
		fut-state-resolved
			hard-fail: "resolving an already-resolved fut"
	f.state := new<fut-state-resolved<?t>> value
	f.lk.ref-of-val release-lock

resolve-recur void(node opt fut-callback-node<?t>, value ?t)
	match node
		none
			pass
		some s
			| the fun-ref will return a fut<void>, just ignore it
			drop: s.value.cb call value
			s.value.next-node resolve-recur value

joiner<?out, ?in0, ?in1> record force-sendable
	res fut ?out
	fun fun-ref2 ?out ?in0 ?in1
	arg0 mut opt ?in0
	arg1 mut opt ?in1
	| NOTE: we can't just check that both arg0 and arg1 are done -- we might try calling 'fun' twice.
	| We need to atomically decrement the counter so we only call 'fun' once
	n-remaining-args by-val thread-safe-counter

decr-joiner void(j joiner ?out ?in0 ?in1) unsafe send<?out> send<?in0> send<?in1>
	when
		j.n-remaining-args.ref-of-val decrement
			j.fun call j.arg0.force, j.arg1.force forward-to j.res
		else
			pass

join fut ?out(a fut ?in0, b fut ?in1, fun fun-ref2 ?out ?in0 ?in1) trusted send<?out> send<?in0> send<?in1>
	res = new-unresolved-fut<?out>
	joiner = new<joiner<?out, ?in0, ?in1>> res, fun, none, none, new-thread-safe-counter: two
	a then-void \value
		joiner.arg0 := value some
		joiner decr-joiner
	b then-void \value
		joiner.arg1 := value some
		joiner decr-joiner
	res

| NOTE: The function will be called with whatever ctx the fut terminates with!!!
then-void void(f fut ?t, cb fun-mut1 void ?t) unsafe
	f.lk.ref-of-val acquire-lock
	res = match f.state
		fut-state-callbacks cbs
			| create a new callback
			f.state := new<fut-state-callbacks<?t>> some: new cb, cbs.head
		fut-state-resolved r
			cb call r.value
	f.lk.ref-of-val release-lock
	res

forward-to void(from fut ?t, to fut ?t) unsafe
	from then-void \value
		to resolve value

then fut ?out(f fut ?in, cb fun-ref1 ?out ?in) trusted send<?out> send<?in>
	res = new-unresolved-fut<?out>
	f then-void \value
		cb call value forward-to res
	res

new-actor-id actor-id(v vat) noctx trusted
	v.next-actor-id.ref-of-val get-and-increment

new-mut-arr-by-val-with-capacity-from-unmanaged-memory by-val mut-arr<?t>(capacity nat) noctx unsafe
	new false, zero, capacity, capacity unmanaged-alloc-elements<?t>

new-vat by-val vat(gctx global-ctx, id vat-id, max-threads nat) noctx unsafe
	actors = max-threads new-mut-arr-by-val-with-capacity-from-unmanaged-memory<actor-id>
	new gctx, id, new-gc, new-lock, new-mut-bag, actors, zero, new-thread-safe-counter

| Unsafe because you must ensure 'task' is safe to run in parallel.
add-task void(v vat, t task) unsafe
	| Do allocation outside of the lock
	node = t new-mut-bag-node

	v.tasks-lock.ref-of-val acquire-lock
	v.tasks.ref-of-val add node
	v.tasks-lock.ref-of-val release-lock

	v.gctx.may-be-work-to-do.ref-of-val broadcast

| TODO: if mut-bag-node is in unmanaged memory, don't need ctx for this
add-first-task void(vat vat, args arr c-str, user-main-ptr fun-ptr2 fut<int32> ctx arr<str>) unsafe
	| TODO: store the main fut somewhere so we can test for errors
	vat add-task new<task> vat.new-actor-id, \
		| TODO: &to-str (requires overload resolution in funaslambda)
		real-args = args map {it.to-str}
		drop: user-main-ptr call get-ctx, real-args


thread-local-stuff record mut
	by-ref
	ignore-me nat

thread-function void(thread-id nat, gctx global-ctx, tls thread-local-stuff) noctx unsafe
	when
		gctx is-shut-down
			| Exit. Should be no tasks left.
			gctx.lk.ref-of-val acquire-lock
			assert-vats-are-shut-down: zero, gctx.vats
			gctx.lk.ref-of-val release-lock
		else
			hard-assert: gctx.n-live-threads > zero
			| Get a task to do; or sleep.
			last-checked = gctx.may-be-work-to-do.ref-of-val get-last-checked

			match gctx choose-task
				ok ok-chosen-task
					gctx do-task tls, ok-chosen-task.value
				err e
					when
						e.value.last-thread-out
							hard-forbid: gctx.is-shut-down
							gctx.is-shut-down := true
							| Wake up sleeping threads so they can shut down
							gctx.may-be-work-to-do.ref-of-val broadcast
						else
							gctx.may-be-work-to-do.ref-of-val wait-on last-checked

			| Do another task
			thread-function: thread-id, gctx, tls

new-ctx by-val ctx(gctx global-ctx, vat vat, actor-id actor-id) noctx unsafe
	new gctx.as-any-ptr, vat.id, actor-id, vat.gc.ref-of-val.get-gc-ctx.as-any-ptr

return-ctx void(c ctx) noctx unsafe
	c.gc-ctx-ptr.as-ref return-gc-ctx

do-task void(gctx global-ctx, tls thread-local-stuff, chosen-task chosen-task) noctx unsafe
	vat = chosen-task.vat
	match chosen-task.task-or-gc
		none
			| Means -- do GC
			| We might have avoided doing a task because GC was running.
			| Now those tasks can be done.
			todo
			gctx.may-be-work-to-do.ref-of-val broadcast
		some some-task
			task = some-task.value
			ctx = new-ctx: gctx, vat, task.actor-id
			ctx.ref-of-val call-with-ctx task.fun
			vat.tasks-lock.ref-of-val acquire-lock
			vat.currently-running-actors.ref-of-val noctx-must-remove-unordered task.actor-id
			vat.tasks-lock.ref-of-val release-lock
			ctx.ref-of-val return-ctx

	| We incremented this when choosing the task.
	vat.tasks-lock.ref-of-val acquire-lock
	vat.n-threads-running := vat.n-threads-running.noctx-decr
	vat.tasks-lock.ref-of-val release-lock


task-or-gc alias
	opt task

chosen-task record mut
	by-val
	vat vat
	| If none, do GC on the vat.
	task-or-gc task-or-gc

no-chosen-task record
	by-val
	| If true, no threads are doing any work and we should exit the program.
	last-thread-out bool


choose-task result chosen-task no-chosen-task(gctx global-ctx) noctx unsafe
	gctx.lk.ref-of-val acquire-lock

	| TODO: more fair algorithm.
	| This looks for the first vat with some work to do.
	| (That is unfair as vat 0 will tend to get the most attention.)

	res = as<result<chosen-task, no-chosen-task>>: match gctx.vats choose-task-recur zero
		none
			| Did not find a task to do.
			| (Tasks may have been added concurrently;
			| this is fine as we're about to wait on a condition and will immediately wake up if so.)
			gctx.n-live-threads := gctx.n-live-threads.noctx-decr
			err: new<no-chosen-task> gctx.n-live-threads zero?
		some s
			s.value ok

	gctx.lk.ref-of-val release-lock

	res


choose-task-recur opt chosen-task(vats arr vat, i nat) noctx unsafe
	when
		i == vats.size
			none
		else
			vat = vats noctx-at i
			match vat choose-task-in-vat
				none
					vats choose-task-recur i.noctx-incr
				some s
					some: new<chosen-task> vat, s.value



| some(none) means: do a GC
choose-task-in-vat opt task-or-gc(vat vat) noctx unsafe
	vat.tasks-lock.ref-of-val acquire-lock

	res = as<opt<task-or-gc>>: when
		| TODO: ref-of-val should be unnecessary for property access?
		vat.gc.ref-of-val.needs-gc
			when
				vat.n-threads-running zero?
					| do GC
					none some
				else
					| do nothing -- a thread is running on this vat
					| we can't do a GC now, but don't want to start a new task either
					| because that would block GC
					none
		else
			match vat find-and-remove-first-doable-task
				none
					| No tasks to run
					none
				some s
					s.value.some some

	when
		res empty?
			pass
		else
			vat.n-threads-running := vat.n-threads-running.noctx-incr

	vat.tasks-lock.ref-of-val release-lock

	res

task-and-nodes record mut
	by-val
	task task
	nodes opt mut-bag-node<task>

find-and-remove-first-doable-task opt task(vat vat) noctx unsafe
	tasks = vat.tasks.ref-of-val
	res = vat find-and-remove-first-doable-task-recur tasks.head
	match res
		none
			none
		some s
			tasks.head := s.value.nodes
			s.value.task some

find-and-remove-first-doable-task-recur opt task-and-nodes(vat vat, opt-node opt mut-bag-node<task>) noctx unsafe
	match opt-node
		none
			none
		some s
			node = s.value
			task = node.value
			| Can't do this task if the actor is busy.
			| (If we don't have space to expand currently-running-actors,
			| shouldn't be starting a new task anyway.)
			actors = vat.currently-running-actors ref-of-val
			task-ok = when
				actors contains task.actor-id
					false
				else
					actors push-capacity-must-be-sufficient task.actor-id
					true
			when
				task-ok
					| Extract this task (return just its tail)
					some: new<task-and-nodes> task, node.next-node
				else
					match vat find-and-remove-first-doable-task-recur node.next-node
						none
							none
						some ss
							tn = ss.value as<task-and-nodes>
							node.next-node := tn.nodes
							some: new<task-and-nodes> tn.task, node some

assert-vats-are-shut-down void(i nat, vats arr vat) noctx unsafe
	when
		i == vats.size
			pass
		else
			vat = vats noctx-at i

			vat.tasks-lock.ref-of-val acquire-lock
			hard-forbid: vat.gc.ref-of-val needs-gc
			hard-assert: vat.n-threads-running zero?
			hard-assert: vat.tasks.ref-of-val empty?
			vat.tasks-lock.ref-of-val release-lock

			assert-vats-are-shut-down: i.noctx-incr, vats


