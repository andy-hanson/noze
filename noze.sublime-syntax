%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# https://www.sublimetext.com/docs/3/scope_naming.html

# NOTE: For an identifier I use this regex:
# {{name}}
# It appears many times. If changing it be sure to find and replace.
# For types, prepend '\??' since it may be a type variable.

variables:
  name:      '(([a-z0-9\-]+\??)|[\+\-\*\/\<\>\=\?]+)'
  type_name: '\??[a-z0-9\-]+'
  spec_name: '\??[a-z0-9\-]+'

name: noze
file_extensions:
  - nz
scope: source.noze
contexts:
  prototype:
    # This is a part of every context
    - match: '(?<=[a-z0-9\-\?])<'
      scope: comment # punctuation.definition.generic.begin
      push: type_args
    - match: "[A-Z]"
      scope: invalid
    - match: \|\|?\s.*
      scope: comment
    - match: '^\s*(region)[^\n]*\n'
      scope: comment
      captures:
        1: keyword

  type_args:
    # TODO: this shouldn't be necessary to explicitly include the prototype, right?
    - include: prototype
    - match: ','
      scope: comment # punctuation.separator
    - match: '>'
      scope: comment # punctuation.definition.generic.end
      pop: true
    - match: '{{type_name}}'
      scope: storage.type

  main:
    - match: import
      scope: keyword
      push: import
    - match: '{{name}}'
      scope: keyword
      push: decl_after_name

  decl_after_name:
    # Ends at the first un-indented line
    - match: (?=^[^\t])
      pop: true
    - match: alias
      scope: comment
      push: alias
    - match: record
      scope: comment
      push: record
    - match: spec
      scope: comment
      push: spec
    - match: union
      scope: comment
      push: union
    - match: '{{type_name}}'
      scope: entity.name.type
      push: function

  import:
    - meta_scope: entity.name.namespace
    - match: \.
      scope: punctuation
    - match: $
      pop: true

  alias:
    # Ends at the first un-indented line
    - match: (?=^[^\t])
      pop: true
    - match: '[a-z0-9\-]+'
      scope: identifier
      push: type_ending_in_nl

  record:
    # Ends at the first un-indented line
    - match: (?=^[^\t])
      pop: true
    - match: 'force-sendable|mut|sendable'
      scope: keyword
    - match: $
      push: record_body

  record_body:
    # Ends at the first un-indented line
    - match: (?=^[^\t])
      pop: true
    - match: 'by-ref|by-val'
      scope: keyword
    - match: '[a-z0-9\-]+'
      scope: identifier
      push: type_ending_in_nl

  spec:
    # Ends at the first un-indented line
    - match: ^(?=[^\t])
      pop: true
    # Each line is a signature
    - match: '{{name}}'
      scope: entity.name.function
      push: spec_signature

  spec_signature:
    - match: '{{type_name}}'
      scope: storage.type
    - match: '\('
      scope: comment
      push: parameters
    - match: '$'
      pop: true

  union:
    - meta_scope: storage.type
    # Ends at the first un-indented line
    - match: ^(?=[^\t])
      pop: true

  type_ending_in_nl:
    - match: '\smut\s'
      scope: keyword
    - match: '{{type_name}}'
      scope: storage.type
    - match: $
      pop: true

  function:
    - match: '\s+{{type_name}}'
      scope: storage.type
    - match: '(?=\()'
      push: fun_signature_starting_at_l_paren
    - match: $
      push: expression
    # Ends at the first un-indented line
    - match: (?=^[^\t])
      pop: true

  fun_signature_starting_at_l_paren:
    - match: '\('
      scope: comment # punctuation.section.group.begin
      push: parameters
    - match: 'builtin|extern|noctx|summon|trusted|unsafe'
      scope: keyword
    - match: '{{spec_name}}'
      scope: entity.name
    - match: (?=$)
      pop: true

  parameters:
    - match: '[a-z0-9\-]+'
      scope: identifier
      push: parameter_type
    - match: '\)'
      scope: comment # punctuation.section.group.end
      pop: true

  parameter_type:
    - match: '{{type_name}}'
      scope: storage.type
    - match: ','
      scope: comment # punctuation.separator
      pop: true
    # If the next character is a ')' -- don't consume it, pop and let 'parameters' do that.
    - match: '(?=\))'
      pop: true

  expression:
    # Ends at the first un-indented line
    - match: (?=^[^\t])
      pop: true
    # Skip beginning-of-line indent
    - match: ^\s+
    # `foo:`
    - match: '{{name}}(\:)\s+'
      scope: entity.name.function
      captures:
        3: comment
    # `.foo`
    - match: (\.){{name}}
      scope: entity.name.function
      captures:
        1: comment # punctuation.accessor
    # numbers
    - match: '\b-?((0((b[01]+)|(o[0-8]+)|(x[\da-f]+)))|(\d+(\.\d+)?))'
      scope: constant.numeric

    # Keywords that may be followed by type arguments
    - match: (new|new-arr)(?=$|<|\,|\s|\}|\.)
      scope: keyword
      push: new
    # Other keywords
    - match: '(else|it|match|when)(?=$|<|\,|\s|\}|\.)'
      scope: keyword
    - match: '{{name}}'
      scope: identifier
    # FunAsLambda (&foo)
    - match: '\&{{name}}'
      scope: entity.name.function
    # Lambda `\x y`
    - match: '(\\).*$'
      # parameters are identifiers
      scope: identifier
      captures:
        1: comment
    # `x = y` or `x := y`
    - match: '\s+\:?\=\s+'
      scope: keyword
    # `"foo"`
    - match: '"'
      push: string
    - match: '[\(\[\]\)\{\}]'
      scope: comment # punctuation.section.embedded
    # Making sure that when we eat a comma, we eat the space after it too.
    - match: '\,\s+'
      scope: comment # punctuation.separator
    # Method call ` foo ` or ` foo: `
    - match: '\s+{{name}}(\:)?\s+'
      scope: entity.name.function
      captures:
        3: comment

  # Give 'new' a scope to ensure that after type argumetns are parsed (from 'prototype' scope), we eat a space
  new:
    - match: \s+
      pop: true

  string:
    - meta_scope: string.quoted
    - meta_include_prototype: false
    - match: '"'
      pop: true
    - match: \\.
      scope: constant.character.escape
    - match: '\{([^}])\}'
      scope: punctuation
      captures:
        1: string.interpolated
